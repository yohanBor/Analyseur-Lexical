/* The following code was generated by JFlex 1.6.1 */

package fr.ubordeaux.deptinfo.compilation.lea.parser;

import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/mnt/c/Users/yohan/OneDrive/Documents/FAC/L3/Cours semestre 6/Compilation/projet/lexer/Lexer.jflex</tt>
 */
public class ParserLexer implements Parser.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\61\1\12\1\12\1\12\1\12\23\0\1\26\1\6\2\0"+
    "\1\30\1\31\1\7\1\15\1\16\1\11\1\27\1\23\1\5\1\3"+
    "\1\10\12\2\1\24\1\25\1\21\1\33\1\22\2\0\4\1\1\4"+
    "\25\1\1\17\1\0\1\20\1\0\1\1\1\0\1\40\1\34\1\44"+
    "\1\54\1\37\1\55\1\62\1\46\1\52\1\1\1\43\1\36\1\47"+
    "\1\41\1\35\1\50\1\56\1\42\1\45\1\51\1\53\1\57\1\63"+
    "\1\60\1\64\1\1\1\13\1\32\1\14\7\0\1\12\u1fa2\0\1\12"+
    "\1\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\1\17\2\2\0\1\30\1\31\1\32\1\0"+
    "\1\33\1\0\1\34\1\0\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\27\2\1\55\1\2\1\56"+
    "\1\57\10\2\2\60\1\0\1\61\1\0\1\62\1\63"+
    "\1\64\1\65\21\2\1\66\2\2\1\67\11\2\1\70"+
    "\6\2\1\34\2\2\1\71\1\72\1\73\2\2\1\74"+
    "\1\75\7\2\1\76\1\77\2\2\1\100\4\2\1\101"+
    "\1\102\14\2\1\103\4\2\1\104\1\105\2\2\1\106"+
    "\14\2\1\107\1\110\2\2\1\111\1\112\3\2\1\113"+
    "\1\114\2\2\1\115\1\116\3\2\1\117\2\2\1\120"+
    "\6\2\1\121\6\2\1\122\1\2\1\123\1\2\1\124"+
    "\1\125\1\2\1\126\1\127\1\2\1\130\1\131\5\2"+
    "\1\132\2\2\1\133\1\134\1\135\1\2\1\136\1\137"+
    "\1\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\u0212\0\u0247\0\65\0\u027c\0\65\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"+
    "\0\u06a0\0\u06d5\0\u070a\0\u073f\0\65\0\65\0\65\0\u013e"+
    "\0\65\0\u0774\0\u07a9\0\u07de\0\65\0\65\0\u0813\0\65"+
    "\0\u0848\0\65\0\65\0\65\0\65\0\65\0\65\0\u087d"+
    "\0\65\0\u08b2\0\65\0\65\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\152\0\152\0\u0e14"+
    "\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc"+
    "\0\u0ff1\0\u0ff1\0\65\0\u1026\0\65\0\65\0\65\0\65"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce"+
    "\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376"+
    "\0\u13ab\0\152\0\u13e0\0\u1415\0\152\0\u144a\0\u147f\0\u14b4"+
    "\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c"+
    "\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\65\0\u179a\0\u17cf"+
    "\0\152\0\152\0\152\0\u1804\0\u1839\0\65\0\152\0\u186e"+
    "\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\152\0\152"+
    "\0\u19e1\0\u1a16\0\152\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\152"+
    "\0\152\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d"+
    "\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\152\0\u1d9b\0\u1dd0"+
    "\0\u1e05\0\u1e3a\0\152\0\152\0\u1e6f\0\u1ea4\0\152\0\u1ed9"+
    "\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081"+
    "\0\u20b6\0\u20eb\0\u2120\0\152\0\152\0\u2155\0\u218a\0\u21bf"+
    "\0\152\0\u21f4\0\u2229\0\u225e\0\152\0\152\0\u2293\0\u22c8"+
    "\0\152\0\152\0\u22fd\0\u2332\0\u2367\0\152\0\u239c\0\u23d1"+
    "\0\152\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\152"+
    "\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d\0\152\0\u2682"+
    "\0\152\0\u26b7\0\152\0\152\0\u26ec\0\152\0\152\0\u2721"+
    "\0\65\0\152\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\152"+
    "\0\u285f\0\u2894\0\152\0\152\0\152\0\u28c9\0\152\0\152"+
    "\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\1\12\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\3\1\35\1\36"+
    "\1\3\1\37\1\40\1\3\1\41\1\42\1\3\1\43"+
    "\1\44\1\45\1\46\1\3\1\47\1\50\1\3\1\51"+
    "\1\3\1\2\1\3\1\52\1\3\66\0\2\3\1\0"+
    "\1\3\27\0\25\3\1\0\3\3\2\0\1\4\1\53"+
    "\1\54\32\0\1\54\30\0\1\55\66\0\1\56\25\0"+
    "\1\57\31\0\6\60\1\61\56\60\7\62\1\0\55\62"+
    "\10\0\1\63\1\64\21\0\1\65\64\0\1\66\52\0"+
    "\1\67\11\0\1\70\53\0\1\71\10\0\1\72\64\0"+
    "\1\73\64\0\1\74\60\0\1\75\3\0\1\76\64\0"+
    "\1\77\62\0\1\100\1\0\1\101\63\0\1\102\1\103"+
    "\64\0\1\104\32\0\2\3\1\0\1\3\27\0\1\3"+
    "\1\105\4\3\1\106\16\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\16\3\1\107\6\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\2\3\1\110\2\3"+
    "\1\111\14\3\1\112\1\3\1\113\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\3\3\1\114\13\3\1\115"+
    "\5\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\3\3\1\116\1\117\20\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\1\3\1\120\1\121\1\3\1\122"+
    "\5\3\1\123\12\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\3\3\1\124\11\3\1\125\7\3\1\0"+
    "\1\3\1\126\1\3\1\0\2\3\1\0\1\3\27\0"+
    "\4\3\1\127\20\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\6\3\1\130\10\3\1\131\5\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\12\3\1\132"+
    "\12\3\1\0\2\3\1\133\1\0\2\3\1\0\1\3"+
    "\27\0\5\3\1\134\5\3\1\135\5\3\1\136\3\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\1\3"+
    "\1\137\1\3\1\140\21\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\1\3\1\141\1\142\13\3\1\143"+
    "\1\144\5\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\16\3\1\145\6\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\6\3\1\146\3\3\1\147\12\3"+
    "\1\0\3\3\2\0\1\150\64\0\1\151\2\0\1\152"+
    "\21\0\1\152\44\0\1\153\55\0\12\63\1\0\52\63"+
    "\11\64\1\154\53\64\33\0\1\155\64\0\1\156\64\0"+
    "\1\157\64\0\1\160\32\0\2\3\1\0\1\3\27\0"+
    "\1\3\1\161\23\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\3\3\1\162\21\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\11\3\1\163\13\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\11\3\1\164"+
    "\13\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\17\3\1\165\5\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\17\3\1\166\5\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\15\3\1\167\7\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\25\3\1\0"+
    "\1\3\1\170\1\3\1\0\2\3\1\0\1\3\27\0"+
    "\2\3\1\171\22\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\4\3\1\172\10\3\1\173\7\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\5\3\1\174"+
    "\17\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\5\3\1\175\5\3\1\176\11\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\4\3\1\177\20\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\11\3\1\200"+
    "\13\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\4\3\1\201\20\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\15\3\1\202\7\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\6\3\1\203\16\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\16\3\1\204"+
    "\6\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\14\3\1\205\1\3\1\206\6\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\1\3\1\207\14\3\1\210"+
    "\6\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\1\211\24\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\16\3\1\212\6\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\14\3\1\213\10\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\15\3\1\214\7\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\14\3"+
    "\1\215\10\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\21\3\1\216\3\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\6\3\1\217\16\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\1\3\1\220\23\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\5\3"+
    "\1\221\17\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\5\3\1\222\17\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\6\3\1\223\16\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\16\3\1\224\6\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\16\3"+
    "\1\225\6\3\1\0\3\3\2\0\1\150\1\0\1\54"+
    "\32\0\1\54\27\0\1\151\62\0\10\64\1\226\1\154"+
    "\53\64\1\0\2\3\1\0\1\3\27\0\2\3\1\227"+
    "\22\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\4\3\1\230\20\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\15\3\1\231\7\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\3\3\1\232\21\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\13\3\1\233"+
    "\11\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\16\3\1\234\6\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\3\3\1\235\21\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\25\3\1\236\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\2\3\1\237\22\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\20\3\1\240"+
    "\4\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\17\3\1\241\5\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\25\3\1\0\1\242\2\3\1\0\2\3"+
    "\1\0\1\3\27\0\11\3\1\243\3\3\1\244\7\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\14\3"+
    "\1\245\10\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\11\3\1\246\13\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\3\3\1\247\21\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\6\3\1\250\16\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\16\3"+
    "\1\251\6\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\15\3\1\252\7\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\5\3\1\253\17\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\10\3\1\254\4\3"+
    "\1\255\7\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\23\3\1\256\1\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\2\3\1\257\22\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\11\3\1\260\13\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\3\3"+
    "\1\261\21\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\3\3\1\262\21\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\1\3\1\263\1\264\22\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\4\3\1\265"+
    "\20\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\3\3\1\266\21\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\4\3\1\267\20\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\4\3\1\270\20\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\10\3\1\271"+
    "\14\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\15\3\1\272\7\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\15\3\1\273\7\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\2\3\1\274\22\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\3\3\1\275"+
    "\21\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\7\3\1\276\15\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\23\3\1\277\1\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\5\3\1\300\17\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\2\3\1\301"+
    "\22\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\6\3\1\302\16\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\3\3\1\303\21\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\15\3\1\304\7\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\16\3\1\305"+
    "\6\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\4\3\1\306\20\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\11\3\1\307\13\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\5\3\1\310\17\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\10\3\1\311"+
    "\14\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\3\3\1\312\21\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\3\3\1\313\21\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\4\3\1\314\20\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\16\3\1\315"+
    "\6\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\6\3\1\316\16\3\1\0\1\317\2\3\1\0\2\3"+
    "\1\0\1\3\27\0\6\3\1\320\16\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\3\3\1\321\21\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\17\3"+
    "\1\322\5\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\4\3\1\323\20\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\15\3\1\324\7\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\2\3\1\325\22\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\15\3"+
    "\1\326\7\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\17\3\1\327\5\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\3\3\1\330\21\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\3\3\1\331\21\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\4\3"+
    "\1\332\20\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\4\3\1\333\20\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\20\3\1\334\4\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\5\3\1\335\17\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\5\3"+
    "\1\336\17\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\5\3\1\337\17\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\6\3\1\340\16\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\25\3\1\0\1\341"+
    "\2\3\1\0\2\3\1\0\1\3\27\0\12\3\1\342"+
    "\12\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\20\3\1\343\4\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\10\3\1\344\14\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\15\3\1\345\7\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\10\3\1\346"+
    "\14\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\21\3\1\347\3\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\3\3\1\350\21\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\15\3\1\351\7\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\13\3\1\352"+
    "\11\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\2\3\1\353\22\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\10\3\1\354\14\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\16\3\1\355\6\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\4\3\1\356"+
    "\20\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\2\3\1\357\22\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\5\3\1\360\17\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\2\3\1\361\22\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\11\3\1\362"+
    "\13\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\17\3\1\363\5\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\4\3\1\364\20\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\17\3\1\365\5\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\15\3\1\366"+
    "\7\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\3\3\1\367\21\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\4\3\1\370\20\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\6\3\1\371\16\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\3\3\1\372"+
    "\21\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\15\3\1\373\7\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\12\3\1\374\12\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\1\3\1\375\23\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\2\3\1\376"+
    "\22\3\1\0\3\3\1\0\2\3\1\0\1\3\27\0"+
    "\5\3\1\377\17\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\27\0\3\3\1\u0100\21\3\1\0\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\25\3\1\u0101\3\3\1\0"+
    "\2\3\1\0\1\3\27\0\3\3\1\u0102\21\3\1\0"+
    "\3\3\1\0\2\3\1\0\1\3\27\0\1\u0103\24\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\6\3"+
    "\1\u0104\16\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\3\3\1\u0105\21\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\10\3\1\u0106\14\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\5\3\1\u0107\17\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\5\3"+
    "\1\u0108\17\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\5\3\1\u0109\17\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\2\3\1\u010a\22\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\3\3\1\u010b\21\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\20\3"+
    "\1\u010c\4\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\3\3\1\u010d\21\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\3\27\0\15\3\1\u010e\7\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\27\0\15\3\1\u010f\7\3"+
    "\1\0\3\3\1\0\2\3\1\0\1\3\27\0\3\3"+
    "\1\u0110\21\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\27\0\11\3\1\u0111\13\3\1\0\3\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10494];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\6\11\2\1\1\11\1\1\1\11"+
    "\25\1\2\0\3\11\1\0\1\11\1\0\1\1\1\0"+
    "\2\11\1\1\1\11\1\1\6\11\1\1\1\11\1\1"+
    "\2\11\45\1\1\0\1\11\1\0\4\11\45\1\1\11"+
    "\7\1\1\11\142\1\1\11\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  // comment/decomment to trace code
  //private final boolean DEBUGGING = true;
  private final boolean DEBUGGING = false;
  
  private Position startPos;
  private Position endPos;
  private Object lVal;

    /**
     * Method to retrieve the beginning position of the last scanned token.
     * @return the position at which the last scanned token starts.
     */
    public Position getStartPos(){
 	   return startPos;
    }

    /**
     * Method to retrieve the ending position of the last scanned token.
     * @return the first position beyond the last scanned token.
     */
    public Position getEndPos(){
    	   return endPos;
    }

    /**
     * Method to retrieve the semantic value of the last scanned token.
     * @return the semantic value of the last scanned token.
     */
    public Object getLVal(){
        return lVal;
    }
    
  /**
   * Fetch the next token.  Called yylex in pull parsers.
   */
  public int yylex() throws IOException {
    startPos = new Position(yyline, yycolumn);
    int ttype = nextToken();
    endPos = new Position(yyline, yycolumn);
    return ttype;
  }

  /**
   * Build and emit a syntax error message.
   */
  public void reportSyntaxError(Parser.Context context) {
    System.err.print(context.getLocation() + ": erreur de syntaxe");
      final int TOKENMAX = 10;
      Parser.SymbolKind[] arg = new Parser.SymbolKind[TOKENMAX];
      int n = context.getExpectedTokens(arg, TOKENMAX);
      for (int i = 0; i < n; ++i) {
        System.err.print((i == 0 ? ": expected " : " or ")
                         + arg[i].getName());
      }
      Parser.SymbolKind lookahead = context.getToken();
      if (lookahead != null)
        System.err.print(" before " + lookahead.getName());
    System.err.println("");
  }

  public void yyerror(Parser.Location loc, String msg) {
    if (loc == null)
      System.err.println(msg);
    else
      System.err.println(loc + "::: " + msg);
  }

  public int token(int yytype){
	if (DEBUGGING) {
		System.err.printf ("*** token(%d): %s\n", yytype, yytext());
	}
	return yytype;
  }

  public int token(int yytype, Object lVal){
  	this.lVal = lVal;
  	return token(yytype);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ParserLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int nextToken() throws java.io.IOException, java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 97: break;
          case 2: 
            { return token(IDENTIFIER, yytext());
            }
          case 98: break;
          case 3: 
            { return token(CONSTANT_INTEGER, new Integer(yytext()));
            }
          case 99: break;
          case 4: 
            { return token('.');
            }
          case 100: break;
          case 5: 
            { return token('-');
            }
          case 101: break;
          case 6: 
            { return token('/');
            }
          case 102: break;
          case 7: 
            { return token('*');
            }
          case 103: break;
          case 8: 
            { return token('{');
            }
          case 104: break;
          case 9: 
            { return token('}');
            }
          case 105: break;
          case 10: 
            { return token('(');
            }
          case 106: break;
          case 11: 
            { return token(')');
            }
          case 107: break;
          case 12: 
            { return token('[');
            }
          case 108: break;
          case 13: 
            { return token(']');
            }
          case 109: break;
          case 14: 
            { return token('<');
            }
          case 110: break;
          case 15: 
            { return token('>');
            }
          case 111: break;
          case 16: 
            { return token(',');
            }
          case 112: break;
          case 17: 
            { return token(':');
            }
          case 113: break;
          case 18: 
            { return token(';');
            }
          case 114: break;
          case 19: 
            { return token('!');
            }
          case 115: break;
          case 20: 
            { return token('+');
            }
          case 116: break;
          case 21: 
            { return token('%');
            }
          case 117: break;
          case 22: 
            { return token('&');
            }
          case 118: break;
          case 23: 
            { return token('|');
            }
          case 119: break;
          case 24: 
            { return token(DOTS);
            }
          case 120: break;
          case 25: 
            { return token(DEC);
            }
          case 121: break;
          case 26: 
            { return token(MINUSE);
            }
          case 122: break;
          case 27: 
            { return token(CONSTANT_STRING, yytext());
            }
          case 123: break;
          case 28: 
            { if (DEBUGGING) {
		System.err.println("*** comments");
	}
            }
          case 124: break;
          case 29: 
            { return token(DIVE);
            }
          case 125: break;
          case 30: 
            { return token(token(TIMESE));
            }
          case 126: break;
          case 31: 
            { return token(LSHIFT);
            }
          case 127: break;
          case 32: 
            { return token(LE);
            }
          case 128: break;
          case 33: 
            { return token(RSHIFT);
            }
          case 129: break;
          case 34: 
            { return token(GE);
            }
          case 130: break;
          case 35: 
            { return token(ASSIGN);
            }
          case 131: break;
          case 36: 
            { return token(NE);
            }
          case 132: break;
          case 37: 
            { return token(SUCC);
            }
          case 133: break;
          case 38: 
            { return token(PLUSE);
            }
          case 134: break;
          case 39: 
            { return token(PERCE);
            }
          case 135: break;
          case 40: 
            { return token(AND);
            }
          case 136: break;
          case 41: 
            { return token(AMPE);
            }
          case 137: break;
          case 42: 
            { return token(OR);
            }
          case 138: break;
          case 43: 
            { return token(PIPEE);
            }
          case 139: break;
          case 44: 
            { return token(EQ);
            }
          case 140: break;
          case 45: 
            { return token(IN);
            }
          case 141: break;
          case 46: 
            { return token(IF);
            }
          case 142: break;
          case 47: 
            { return token(DO);
            }
          case 143: break;
          case 48: 
            { return token(CONSTANT_FLOAT, new Float(yytext()));
            }
          case 144: break;
          case 49: 
            { return token(CONSTANT_CHAR, yytext());
            }
          case 145: break;
          case 50: 
            { return token(LSHIFTE);
            }
          case 146: break;
          case 51: 
            { return token(RSHIFTE);
            }
          case 147: break;
          case 52: 
            { return token(ANDE);
            }
          case 148: break;
          case 53: 
            { return token(ORE);
            }
          case 149: break;
          case 54: 
            { return token(SET);
            }
          case 150: break;
          case 55: 
            { return token(MAP);
            }
          case 151: break;
          case 56: 
            { return token(FOR);
            }
          case 152: break;
          case 57: 
            { return token(LIST);
            }
          case 153: break;
          case 58: 
            { return token(ELSE);
            }
          case 154: break;
          case 59: 
            { return token(ENUM);
            }
          case 155: break;
          case 60: 
            { return token(NEW);
            }
          case 156: break;
          case 61: 
            { return token(NULL);
            }
          case 157: break;
          case 62: 
            { return token(CASE);
            }
          case 158: break;
          case 63: 
            { return token(CHAR);
            }
          case 159: break;
          case 64: 
            { return token(MAIN);
            }
          case 160: break;
          case 65: 
            { return token(THIS);
            }
          case 161: break;
          case 66: 
            { return token(TYPE);
            }
          case 162: break;
          case 67: 
            { return token(BREAK);
            }
          case 163: break;
          case 68: 
            { return token(RANGE);
            }
          case 164: break;
          case 69: 
            { return token(CONST);
            }
          case 165: break;
          case 70: 
            { return token(CLASS);
            }
          case 166: break;
          case 71: 
            { return token(FLOAT);
            }
          case 167: break;
          case 72: 
            { return token(FINAL);
            }
          case 168: break;
          case 73: 
            { return token(WRITE);
            }
          case 169: break;
          case 74: 
            { return token(WHILE);
            }
          case 170: break;
          case 75: 
            { return token(READLN);
            }
          case 171: break;
          case 76: 
            { return token(RETURN);
            }
          case 172: break;
          case 77: 
            { return token(STRING);
            }
          case 173: break;
          case 78: 
            { return token(SWITCH);
            }
          case 174: break;
          case 79: 
            { return token(PUBLIC);
            }
          case 175: break;
          case 80: 
            { return token(IMPORT);
            }
          case 176: break;
          case 81: 
            { return token(BOOLEAN);
            }
          case 177: break;
          case 82: 
            { return token(PRIVATE);
            }
          case 178: break;
          case 83: 
            { return token(INTEGER);
            }
          case 179: break;
          case 84: 
            { return token(DEFAULT);
            }
          case 180: break;
          case 85: 
            { return token(FOREACH);
            }
          case 181: break;
          case 86: 
            { return token(VIRTUAL);
            }
          case 182: break;
          case 87: 
            { return token(WRITELN);
            }
          case 183: break;
          case 88: 
            { return token(EXTENDS);
            }
          case 184: break;
          case 89: 
            { return token(CONTINUE);
            }
          case 185: break;
          case 90: 
            { return token(FUNCTION);
            }
          case 186: break;
          case 91: 
            { return token(PROCEDURE);
            }
          case 187: break;
          case 92: 
            { return token(PROTECTED);
            }
          case 188: break;
          case 93: 
            { return token(INTERFACE);
            }
          case 189: break;
          case 94: 
            { return token(EQUIVALENT);
            }
          case 190: break;
          case 95: 
            { return token(COMPARABLE);
            }
          case 191: break;
          case 96: 
            { return token(IMPLEMENTS);
            }
          case 192: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
